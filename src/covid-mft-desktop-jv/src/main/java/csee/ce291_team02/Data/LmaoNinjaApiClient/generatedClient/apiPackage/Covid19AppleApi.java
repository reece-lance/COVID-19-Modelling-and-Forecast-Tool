/*
 * disease.sh Docs - An open API for disease-related statistics
 * Third Party API for reliable global disease information
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.apiPackage;

import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiCallback;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiClient;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiException;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiResponse;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.Configuration;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.Pair;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ProgressRequestBody;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidAppleCountries;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidAppleData;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidAppleSubregions;

import java.lang.reflect.Type;

public class Covid19AppleApi {
    private ApiClient apiClient;

    public Covid19AppleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Covid19AppleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v3Covid19AppleCountriesCountryGet
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19AppleCountriesCountryGetCall(String country, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/apple/countries/{country}"
            .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19AppleCountriesCountryGetValidateBeforeCall(String country, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling v3Covid19AppleCountriesCountryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19AppleCountriesCountryGetCall(country, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of supported subregions for specific country in the Apple mobility data set
     * Returns a list of supported subregions in a country where data is available
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @return CovidAppleSubregions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidAppleSubregions v3Covid19AppleCountriesCountryGet(String country) throws ApiException {
        ApiResponse<CovidAppleSubregions> resp = v3Covid19AppleCountriesCountryGetWithHttpInfo(country);
        return resp.getData();
    }

    /**
     * Get a list of supported subregions for specific country in the Apple mobility data set
     * Returns a list of supported subregions in a country where data is available
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @return ApiResponse&lt;CovidAppleSubregions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidAppleSubregions> v3Covid19AppleCountriesCountryGetWithHttpInfo(String country) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19AppleCountriesCountryGetValidateBeforeCall(country, null, null);
        Type localVarReturnType = new TypeToken<CovidAppleSubregions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of supported subregions for specific country in the Apple mobility data set (asynchronously)
     * Returns a list of supported subregions in a country where data is available
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19AppleCountriesCountryGetAsync(String country, final ApiCallback<CovidAppleSubregions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19AppleCountriesCountryGetValidateBeforeCall(country, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidAppleSubregions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19AppleCountriesCountrySubregionsGet
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @param subregions Valid subregion(s) from the /v3/covid-19/apple/countries/{country} endpoint, separated by with commas (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19AppleCountriesCountrySubregionsGetCall(String country, String subregions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/apple/countries/{country}/{subregions}"
            .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()))
            .replaceAll("\\{" + "subregions" + "\\}", apiClient.escapeString(subregions.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19AppleCountriesCountrySubregionsGetValidateBeforeCall(String country, String subregions, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling v3Covid19AppleCountriesCountrySubregionsGet(Async)");
        }
        // verify the required parameter 'subregions' is set
        if (subregions == null) {
            throw new ApiException("Missing the required parameter 'subregions' when calling v3Covid19AppleCountriesCountrySubregionsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19AppleCountriesCountrySubregionsGetCall(country, subregions, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 Apple mobility data for subregions of a country
     * Returns a list of mobility data entries for subregion(s) every day since January 13th. Each entry has driving, transit, and walking data with an associated number of percentage change since January 13th
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @param subregions Valid subregion(s) from the /v3/covid-19/apple/countries/{country} endpoint, separated by with commas (required)
     * @return CovidAppleData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidAppleData v3Covid19AppleCountriesCountrySubregionsGet(String country, String subregions) throws ApiException {
        ApiResponse<CovidAppleData> resp = v3Covid19AppleCountriesCountrySubregionsGetWithHttpInfo(country, subregions);
        return resp.getData();
    }

    /**
     * Get COVID-19 Apple mobility data for subregions of a country
     * Returns a list of mobility data entries for subregion(s) every day since January 13th. Each entry has driving, transit, and walking data with an associated number of percentage change since January 13th
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @param subregions Valid subregion(s) from the /v3/covid-19/apple/countries/{country} endpoint, separated by with commas (required)
     * @return ApiResponse&lt;CovidAppleData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidAppleData> v3Covid19AppleCountriesCountrySubregionsGetWithHttpInfo(String country, String subregions) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19AppleCountriesCountrySubregionsGetValidateBeforeCall(country, subregions, null, null);
        Type localVarReturnType = new TypeToken<CovidAppleData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 Apple mobility data for subregions of a country (asynchronously)
     * Returns a list of mobility data entries for subregion(s) every day since January 13th. Each entry has driving, transit, and walking data with an associated number of percentage change since January 13th
     * @param country A valid country name from the /v3/covid-19/apple/countries endpoint (required)
     * @param subregions Valid subregion(s) from the /v3/covid-19/apple/countries/{country} endpoint, separated by with commas (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19AppleCountriesCountrySubregionsGetAsync(String country, String subregions, final ApiCallback<CovidAppleData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19AppleCountriesCountrySubregionsGetValidateBeforeCall(country, subregions, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidAppleData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19AppleCountriesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19AppleCountriesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/apple/countries";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19AppleCountriesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3Covid19AppleCountriesGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of supported countries for Apple mobility data
     * Returns a list of supported country names
     * @return CovidAppleCountries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidAppleCountries v3Covid19AppleCountriesGet() throws ApiException {
        ApiResponse<CovidAppleCountries> resp = v3Covid19AppleCountriesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a list of supported countries for Apple mobility data
     * Returns a list of supported country names
     * @return ApiResponse&lt;CovidAppleCountries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidAppleCountries> v3Covid19AppleCountriesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19AppleCountriesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CovidAppleCountries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of supported countries for Apple mobility data (asynchronously)
     * Returns a list of supported country names
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19AppleCountriesGetAsync(final ApiCallback<CovidAppleCountries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19AppleCountriesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidAppleCountries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
