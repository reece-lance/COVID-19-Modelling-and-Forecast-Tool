/*
 * disease.sh Docs - An open API for disease-related statistics
 * Third Party API for reliable global disease information
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.apiPackage;

import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiCallback;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiClient;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiException;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiResponse;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.Configuration;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.Pair;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ProgressRequestBody;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistorical;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalAll;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalCountries;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalCountry;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalProvince;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalProvinces;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalUSCounties;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidHistoricalUSCounty;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidJHUCounties;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidJHUCountries;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.CovidJHUCounty;

import java.lang.reflect.Type;

public class Covid19JhucsseApi {
    private ApiClient apiClient;

    public Covid19JhucsseApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Covid19JhucsseApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v3Covid19HistoricalAllGet
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalAllGetCall(String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/all";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalAllGetValidateBeforeCall(String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalAllGetCall(lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get global accumulated COVID-19 time series data
     * 
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistoricalAll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalAll v3Covid19HistoricalAllGet(String lastdays) throws ApiException {
        ApiResponse<CovidHistoricalAll> resp = v3Covid19HistoricalAllGetWithHttpInfo(lastdays);
        return resp.getData();
    }

    /**
     * Get global accumulated COVID-19 time series data
     * 
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistoricalAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalAll> v3Covid19HistoricalAllGetWithHttpInfo(String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalAllGetValidateBeforeCall(lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalAll>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get global accumulated COVID-19 time series data (asynchronously)
     * 
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalAllGetAsync(String lastdays, final ApiCallback<CovidHistoricalAll> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalAllGetValidateBeforeCall(lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalAll>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalCountriesGet
     * @param countries Multiple country names, iso2, iso3, or country IDs separated by commas (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountriesGetCall(String countries, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/{countries}"
            .replaceAll("\\{" + "countries" + "\\}", apiClient.escapeString(countries.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalCountriesGetValidateBeforeCall(String countries, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'countries' is set
        if (countries == null) {
            throw new ApiException("Missing the required parameter 'countries' when calling v3Covid19HistoricalCountriesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountriesGetCall(countries, lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 time series data for a specific set of countries
     * 
     * @param countries Multiple country names, iso2, iso3, or country IDs separated by commas (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistoricalCountries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalCountries v3Covid19HistoricalCountriesGet(String countries, String lastdays) throws ApiException {
        ApiResponse<CovidHistoricalCountries> resp = v3Covid19HistoricalCountriesGetWithHttpInfo(countries, lastdays);
        return resp.getData();
    }

    /**
     * Get COVID-19 time series data for a specific set of countries
     * 
     * @param countries Multiple country names, iso2, iso3, or country IDs separated by commas (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistoricalCountries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalCountries> v3Covid19HistoricalCountriesGetWithHttpInfo(String countries, String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountriesGetValidateBeforeCall(countries, lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalCountries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 time series data for a specific set of countries (asynchronously)
     * 
     * @param countries Multiple country names, iso2, iso3, or country IDs separated by commas (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountriesGetAsync(String countries, String lastdays, final ApiCallback<CovidHistoricalCountries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalCountriesGetValidateBeforeCall(countries, lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalCountries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalCountryGet
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountryGetCall(String country, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/{country}"
            .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalCountryGetValidateBeforeCall(String country, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling v3Covid19HistoricalCountryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryGetCall(country, lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 time series data for a specific country
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistoricalCountry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalCountry v3Covid19HistoricalCountryGet(String country, String lastdays) throws ApiException {
        ApiResponse<CovidHistoricalCountry> resp = v3Covid19HistoricalCountryGetWithHttpInfo(country, lastdays);
        return resp.getData();
    }

    /**
     * Get COVID-19 time series data for a specific country
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistoricalCountry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalCountry> v3Covid19HistoricalCountryGetWithHttpInfo(String country, String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryGetValidateBeforeCall(country, lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalCountry>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 time series data for a specific country (asynchronously)
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountryGetAsync(String country, String lastdays, final ApiCallback<CovidHistoricalCountry> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryGetValidateBeforeCall(country, lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalCountry>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalCountryProvinceGet
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param province Province name. All available names can be found in the /v3/covid-19/historical/{query} endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountryProvinceGetCall(String country, String province, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/{country}/{province}"
            .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()))
            .replaceAll("\\{" + "province" + "\\}", apiClient.escapeString(province.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalCountryProvinceGetValidateBeforeCall(String country, String province, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling v3Covid19HistoricalCountryProvinceGet(Async)");
        }
        // verify the required parameter 'province' is set
        if (province == null) {
            throw new ApiException("Missing the required parameter 'province' when calling v3Covid19HistoricalCountryProvinceGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryProvinceGetCall(country, province, lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 time series data for a specific province in a country
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param province Province name. All available names can be found in the /v3/covid-19/historical/{query} endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistoricalProvince
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalProvince v3Covid19HistoricalCountryProvinceGet(String country, String province, String lastdays) throws ApiException {
        ApiResponse<CovidHistoricalProvince> resp = v3Covid19HistoricalCountryProvinceGetWithHttpInfo(country, province, lastdays);
        return resp.getData();
    }

    /**
     * Get COVID-19 time series data for a specific province in a country
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param province Province name. All available names can be found in the /v3/covid-19/historical/{query} endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistoricalProvince&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalProvince> v3Covid19HistoricalCountryProvinceGetWithHttpInfo(String country, String province, String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryProvinceGetValidateBeforeCall(country, province, lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalProvince>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 time series data for a specific province in a country (asynchronously)
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param province Province name. All available names can be found in the /v3/covid-19/historical/{query} endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountryProvinceGetAsync(String country, String province, String lastdays, final ApiCallback<CovidHistoricalProvince> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryProvinceGetValidateBeforeCall(country, province, lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalProvince>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalCountryProvincesGet
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param provinces Provinces spelled correctly separated by &#x27;,&#x27; or &#x27;|&#x27; delimiters, never both in the same query (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountryProvincesGetCall(String country, String provinces, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/{country}/{provinces}"
            .replaceAll("\\{" + "country" + "\\}", apiClient.escapeString(country.toString()))
            .replaceAll("\\{" + "provinces" + "\\}", apiClient.escapeString(provinces.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalCountryProvincesGetValidateBeforeCall(String country, String provinces, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling v3Covid19HistoricalCountryProvincesGet(Async)");
        }
        // verify the required parameter 'provinces' is set
        if (provinces == null) {
            throw new ApiException("Missing the required parameter 'provinces' when calling v3Covid19HistoricalCountryProvincesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryProvincesGetCall(country, provinces, lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 time series data for a set of provinces in a country
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param provinces Provinces spelled correctly separated by &#x27;,&#x27; or &#x27;|&#x27; delimiters, never both in the same query (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistoricalProvinces
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalProvinces v3Covid19HistoricalCountryProvincesGet(String country, String provinces, String lastdays) throws ApiException {
        ApiResponse<CovidHistoricalProvinces> resp = v3Covid19HistoricalCountryProvincesGetWithHttpInfo(country, provinces, lastdays);
        return resp.getData();
    }

    /**
     * Get COVID-19 time series data for a set of provinces in a country
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param provinces Provinces spelled correctly separated by &#x27;,&#x27; or &#x27;|&#x27; delimiters, never both in the same query (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistoricalProvinces&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalProvinces> v3Covid19HistoricalCountryProvincesGetWithHttpInfo(String country, String provinces, String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryProvincesGetValidateBeforeCall(country, provinces, lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalProvinces>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 time series data for a set of provinces in a country (asynchronously)
     * 
     * @param country A country name, iso2, iso3, or country ID code (required)
     * @param provinces Provinces spelled correctly separated by &#x27;,&#x27; or &#x27;|&#x27; delimiters, never both in the same query (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalCountryProvincesGetAsync(String country, String provinces, String lastdays, final ApiCallback<CovidHistoricalProvinces> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalCountryProvincesGetValidateBeforeCall(country, provinces, lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalProvinces>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalGet
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalGetCall(String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalGetValidateBeforeCall(String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalGetCall(lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 time series data for all countries and their provinces
     * 
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistorical
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistorical v3Covid19HistoricalGet(String lastdays) throws ApiException {
        ApiResponse<CovidHistorical> resp = v3Covid19HistoricalGetWithHttpInfo(lastdays);
        return resp.getData();
    }

    /**
     * Get COVID-19 time series data for all countries and their provinces
     * 
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistorical&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistorical> v3Covid19HistoricalGetWithHttpInfo(String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalGetValidateBeforeCall(lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistorical>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 time series data for all countries and their provinces (asynchronously)
     * 
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalGetAsync(String lastdays, final ApiCallback<CovidHistorical> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalGetValidateBeforeCall(lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistorical>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalUsacountiesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalUsacountiesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/usacounties";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalUsacountiesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalUsacountiesGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all possible US States to query the /historical/usacounties/{state} endpoint with
     * Returns a list of US States and provinces
     * @return CovidHistoricalUSCounties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalUSCounties v3Covid19HistoricalUsacountiesGet() throws ApiException {
        ApiResponse<CovidHistoricalUSCounties> resp = v3Covid19HistoricalUsacountiesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all possible US States to query the /historical/usacounties/{state} endpoint with
     * Returns a list of US States and provinces
     * @return ApiResponse&lt;CovidHistoricalUSCounties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalUSCounties> v3Covid19HistoricalUsacountiesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalUsacountiesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalUSCounties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all possible US States to query the /historical/usacounties/{state} endpoint with (asynchronously)
     * Returns a list of US States and provinces
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalUsacountiesGetAsync(final ApiCallback<CovidHistoricalUSCounties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalUsacountiesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalUSCounties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19HistoricalUsacountiesStateGet
     * @param state US state name, validated in the array returned from the /v3/covid-19/historical/usacounties endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalUsacountiesStateGetCall(String state, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/historical/usacounties/{state}"
            .replaceAll("\\{" + "state" + "\\}", apiClient.escapeString(state.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();
        if (lastdays != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lastdays", lastdays));

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19HistoricalUsacountiesStateGetValidateBeforeCall(String state, String lastdays, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling v3Covid19HistoricalUsacountiesStateGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19HistoricalUsacountiesStateGetCall(state, lastdays, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 time series data for all counties in a specified US state
     * 
     * @param state US state name, validated in the array returned from the /v3/covid-19/historical/usacounties endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return CovidHistoricalUSCounty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidHistoricalUSCounty v3Covid19HistoricalUsacountiesStateGet(String state, String lastdays) throws ApiException {
        ApiResponse<CovidHistoricalUSCounty> resp = v3Covid19HistoricalUsacountiesStateGetWithHttpInfo(state, lastdays);
        return resp.getData();
    }

    /**
     * Get COVID-19 time series data for all counties in a specified US state
     * 
     * @param state US state name, validated in the array returned from the /v3/covid-19/historical/usacounties endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @return ApiResponse&lt;CovidHistoricalUSCounty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidHistoricalUSCounty> v3Covid19HistoricalUsacountiesStateGetWithHttpInfo(String state, String lastdays) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19HistoricalUsacountiesStateGetValidateBeforeCall(state, lastdays, null, null);
        Type localVarReturnType = new TypeToken<CovidHistoricalUSCounty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 time series data for all counties in a specified US state (asynchronously)
     * 
     * @param state US state name, validated in the array returned from the /v3/covid-19/historical/usacounties endpoint (required)
     * @param lastdays Number of days to return. Use &#x27;all&#x27; for the full data set (e.g. 15, all, 24) (optional, default to 30)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19HistoricalUsacountiesStateGetAsync(String state, String lastdays, final ApiCallback<CovidHistoricalUSCounty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19HistoricalUsacountiesStateGetValidateBeforeCall(state, lastdays, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidHistoricalUSCounty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19JhucsseCountiesCountyGet
     * @param county Name of any county in the USA. All counties are listed in the /v3/covid-19/jhucsse/counties/ endpoint (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19JhucsseCountiesCountyGetCall(String county, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/jhucsse/counties/{county}"
            .replaceAll("\\{" + "county" + "\\}", apiClient.escapeString(county.toString()));

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19JhucsseCountiesCountyGetValidateBeforeCall(String county, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'county' is set
        if (county == null) {
            throw new ApiException("Missing the required parameter 'county' when calling v3Covid19JhucsseCountiesCountyGet(Async)");
        }
        
        com.squareup.okhttp.Call call = v3Covid19JhucsseCountiesCountyGetCall(county, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 totals for a specific county
     * 
     * @param county Name of any county in the USA. All counties are listed in the /v3/covid-19/jhucsse/counties/ endpoint (required)
     * @return CovidJHUCounty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidJHUCounty v3Covid19JhucsseCountiesCountyGet(String county) throws ApiException {
        ApiResponse<CovidJHUCounty> resp = v3Covid19JhucsseCountiesCountyGetWithHttpInfo(county);
        return resp.getData();
    }

    /**
     * Get COVID-19 totals for a specific county
     * 
     * @param county Name of any county in the USA. All counties are listed in the /v3/covid-19/jhucsse/counties/ endpoint (required)
     * @return ApiResponse&lt;CovidJHUCounty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidJHUCounty> v3Covid19JhucsseCountiesCountyGetWithHttpInfo(String county) throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19JhucsseCountiesCountyGetValidateBeforeCall(county, null, null);
        Type localVarReturnType = new TypeToken<CovidJHUCounty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 totals for a specific county (asynchronously)
     * 
     * @param county Name of any county in the USA. All counties are listed in the /v3/covid-19/jhucsse/counties/ endpoint (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19JhucsseCountiesCountyGetAsync(String county, final ApiCallback<CovidJHUCounty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19JhucsseCountiesCountyGetValidateBeforeCall(county, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidJHUCounty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19JhucsseCountiesGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19JhucsseCountiesGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/jhucsse/counties";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19JhucsseCountiesGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3Covid19JhucsseCountiesGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 totals for all US counties
     * 
     * @return CovidJHUCounties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidJHUCounties v3Covid19JhucsseCountiesGet() throws ApiException {
        ApiResponse<CovidJHUCounties> resp = v3Covid19JhucsseCountiesGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get COVID-19 totals for all US counties
     * 
     * @return ApiResponse&lt;CovidJHUCounties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidJHUCounties> v3Covid19JhucsseCountiesGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19JhucsseCountiesGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CovidJHUCounties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 totals for all US counties (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19JhucsseCountiesGetAsync(final ApiCallback<CovidJHUCounties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19JhucsseCountiesGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidJHUCounties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3Covid19JhucsseGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3Covid19JhucsseGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/covid-19/jhucsse";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3Covid19JhucsseGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3Covid19JhucsseGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get COVID-19 totals for all countries and their provinces
     * 
     * @return CovidJHUCountries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CovidJHUCountries v3Covid19JhucsseGet() throws ApiException {
        ApiResponse<CovidJHUCountries> resp = v3Covid19JhucsseGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get COVID-19 totals for all countries and their provinces
     * 
     * @return ApiResponse&lt;CovidJHUCountries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CovidJHUCountries> v3Covid19JhucsseGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3Covid19JhucsseGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CovidJHUCountries>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get COVID-19 totals for all countries and their provinces (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3Covid19JhucsseGetAsync(final ApiCallback<CovidJHUCountries> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3Covid19JhucsseGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CovidJHUCountries>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
