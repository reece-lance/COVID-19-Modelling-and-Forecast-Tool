/*
 * disease.sh Docs - An open API for disease-related statistics
 * Third Party API for reliable global disease information
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.apiPackage;

import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiCallback;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiClient;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiException;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ApiResponse;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.Configuration;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.Pair;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ProgressRequestBody;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.invokerPackage.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.InfluenzaILINet;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.InfluenzaUSCL;
import csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model.InfluenzaUSPHL;

import java.lang.reflect.Type;

public class InfluenzaCdcApi {
    private ApiClient apiClient;

    public InfluenzaCdcApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InfluenzaCdcApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v3InfluenzaCdcILINetGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3InfluenzaCdcILINetGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/influenza/cdc/ILINet";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3InfluenzaCdcILINetGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3InfluenzaCdcILINetGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Influenza-like-illness data for the 2019 and 2020 outbreaks from the US Center for Disease Control
     * 
     * @return InfluenzaILINet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfluenzaILINet v3InfluenzaCdcILINetGet() throws ApiException {
        ApiResponse<InfluenzaILINet> resp = v3InfluenzaCdcILINetGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Influenza-like-illness data for the 2019 and 2020 outbreaks from the US Center for Disease Control
     * 
     * @return ApiResponse&lt;InfluenzaILINet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfluenzaILINet> v3InfluenzaCdcILINetGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3InfluenzaCdcILINetGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InfluenzaILINet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Influenza-like-illness data for the 2019 and 2020 outbreaks from the US Center for Disease Control (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3InfluenzaCdcILINetGetAsync(final ApiCallback<InfluenzaILINet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3InfluenzaCdcILINetGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfluenzaILINet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3InfluenzaCdcUSCLGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3InfluenzaCdcUSCLGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/influenza/cdc/USCL";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3InfluenzaCdcUSCLGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3InfluenzaCdcUSCLGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Influenza report data for the 2019 and 2020 outbreaks from the US Center for Disease Control, reported by US clinical labs
     * 
     * @return InfluenzaUSCL
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfluenzaUSCL v3InfluenzaCdcUSCLGet() throws ApiException {
        ApiResponse<InfluenzaUSCL> resp = v3InfluenzaCdcUSCLGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Influenza report data for the 2019 and 2020 outbreaks from the US Center for Disease Control, reported by US clinical labs
     * 
     * @return ApiResponse&lt;InfluenzaUSCL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfluenzaUSCL> v3InfluenzaCdcUSCLGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3InfluenzaCdcUSCLGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InfluenzaUSCL>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Influenza report data for the 2019 and 2020 outbreaks from the US Center for Disease Control, reported by US clinical labs (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3InfluenzaCdcUSCLGetAsync(final ApiCallback<InfluenzaUSCL> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3InfluenzaCdcUSCLGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfluenzaUSCL>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v3InfluenzaCdcUSPHLGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v3InfluenzaCdcUSPHLGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/influenza/cdc/USPHL";

        java.util.List<Pair> localVarQueryParams = new java.util.ArrayList<Pair>();
        java.util.List<Pair> localVarCollectionQueryParams = new java.util.ArrayList<Pair>();

        java.util.Map<String, String> localVarHeaderParams = new java.util.HashMap<String, String>();

        java.util.Map<String, Object> localVarFormParams = new java.util.HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v3InfluenzaCdcUSPHLGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = v3InfluenzaCdcUSPHLGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Influenza report data for the 2019 and 2020 outbreaks from the US Center for Disease Control, reported by US public health labs
     * 
     * @return InfluenzaUSPHL
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InfluenzaUSPHL v3InfluenzaCdcUSPHLGet() throws ApiException {
        ApiResponse<InfluenzaUSPHL> resp = v3InfluenzaCdcUSPHLGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Influenza report data for the 2019 and 2020 outbreaks from the US Center for Disease Control, reported by US public health labs
     * 
     * @return ApiResponse&lt;InfluenzaUSPHL&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InfluenzaUSPHL> v3InfluenzaCdcUSPHLGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v3InfluenzaCdcUSPHLGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<InfluenzaUSPHL>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Influenza report data for the 2019 and 2020 outbreaks from the US Center for Disease Control, reported by US public health labs (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v3InfluenzaCdcUSPHLGetAsync(final ApiCallback<InfluenzaUSPHL> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v3InfluenzaCdcUSPHLGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InfluenzaUSPHL>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
