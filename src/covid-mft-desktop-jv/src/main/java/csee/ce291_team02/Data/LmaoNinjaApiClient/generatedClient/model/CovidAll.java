/*
 * disease.sh Docs - An open API for disease-related statistics
 * Third Party API for reliable global disease information
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package csee.ce291_team02.Data.LmaoNinjaApiClient.generatedClient.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;
/**
 * CovidAll
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-12T19:32:54.804Z[Europe/London]")
public class CovidAll {
  @SerializedName("updated")
  private BigDecimal updated = null;

  @SerializedName("cases")
  private BigDecimal cases = null;

  @SerializedName("todayCases")
  private BigDecimal todayCases = null;

  @SerializedName("deaths")
  private BigDecimal deaths = null;

  @SerializedName("recovered")
  private BigDecimal recovered = null;

  @SerializedName("todayRecovered")
  private BigDecimal todayRecovered = null;

  @SerializedName("active")
  private BigDecimal active = null;

  @SerializedName("critical")
  private BigDecimal critical = null;

  @SerializedName("casesPerOneMillion")
  private BigDecimal casesPerOneMillion = null;

  @SerializedName("deathsPerOneMillion")
  private BigDecimal deathsPerOneMillion = null;

  @SerializedName("tests")
  private BigDecimal tests = null;

  @SerializedName("testsPerOneMillion")
  private BigDecimal testsPerOneMillion = null;

  @SerializedName("population")
  private BigDecimal population = null;

  @SerializedName("oneCasePerPeople")
  private BigDecimal oneCasePerPeople = null;

  @SerializedName("oneDeathPerPeople")
  private BigDecimal oneDeathPerPeople = null;

  @SerializedName("oneTestPerPeople")
  private BigDecimal oneTestPerPeople = null;

  @SerializedName("activePerOneMillion")
  private BigDecimal activePerOneMillion = null;

  @SerializedName("recoveredPerOneMillion")
  private BigDecimal recoveredPerOneMillion = null;

  @SerializedName("criticalPerOneMillion")
  private BigDecimal criticalPerOneMillion = null;

  @SerializedName("affectedCountries")
  private BigDecimal affectedCountries = null;

  public CovidAll updated(BigDecimal updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @Schema(description = "")
  public BigDecimal getUpdated() {
    return updated;
  }

  public void setUpdated(BigDecimal updated) {
    this.updated = updated;
  }

  public CovidAll cases(BigDecimal cases) {
    this.cases = cases;
    return this;
  }

   /**
   * Get cases
   * @return cases
  **/
  @Schema(description = "")
  public BigDecimal getCases() {
    return cases;
  }

  public void setCases(BigDecimal cases) {
    this.cases = cases;
  }

  public CovidAll todayCases(BigDecimal todayCases) {
    this.todayCases = todayCases;
    return this;
  }

   /**
   * Get todayCases
   * @return todayCases
  **/
  @Schema(description = "")
  public BigDecimal getTodayCases() {
    return todayCases;
  }

  public void setTodayCases(BigDecimal todayCases) {
    this.todayCases = todayCases;
  }

  public CovidAll deaths(BigDecimal deaths) {
    this.deaths = deaths;
    return this;
  }

   /**
   * Get deaths
   * @return deaths
  **/
  @Schema(description = "")
  public BigDecimal getDeaths() {
    return deaths;
  }

  public void setDeaths(BigDecimal deaths) {
    this.deaths = deaths;
  }

  public CovidAll recovered(BigDecimal recovered) {
    this.recovered = recovered;
    return this;
  }

   /**
   * Get recovered
   * @return recovered
  **/
  @Schema(description = "")
  public BigDecimal getRecovered() {
    return recovered;
  }

  public void setRecovered(BigDecimal recovered) {
    this.recovered = recovered;
  }

  public CovidAll todayRecovered(BigDecimal todayRecovered) {
    this.todayRecovered = todayRecovered;
    return this;
  }

   /**
   * Get todayRecovered
   * @return todayRecovered
  **/
  @Schema(description = "")
  public BigDecimal getTodayRecovered() {
    return todayRecovered;
  }

  public void setTodayRecovered(BigDecimal todayRecovered) {
    this.todayRecovered = todayRecovered;
  }

  public CovidAll active(BigDecimal active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @Schema(description = "")
  public BigDecimal getActive() {
    return active;
  }

  public void setActive(BigDecimal active) {
    this.active = active;
  }

  public CovidAll critical(BigDecimal critical) {
    this.critical = critical;
    return this;
  }

   /**
   * Get critical
   * @return critical
  **/
  @Schema(description = "")
  public BigDecimal getCritical() {
    return critical;
  }

  public void setCritical(BigDecimal critical) {
    this.critical = critical;
  }

  public CovidAll casesPerOneMillion(BigDecimal casesPerOneMillion) {
    this.casesPerOneMillion = casesPerOneMillion;
    return this;
  }

   /**
   * Get casesPerOneMillion
   * @return casesPerOneMillion
  **/
  @Schema(description = "")
  public BigDecimal getCasesPerOneMillion() {
    return casesPerOneMillion;
  }

  public void setCasesPerOneMillion(BigDecimal casesPerOneMillion) {
    this.casesPerOneMillion = casesPerOneMillion;
  }

  public CovidAll deathsPerOneMillion(BigDecimal deathsPerOneMillion) {
    this.deathsPerOneMillion = deathsPerOneMillion;
    return this;
  }

   /**
   * Get deathsPerOneMillion
   * @return deathsPerOneMillion
  **/
  @Schema(description = "")
  public BigDecimal getDeathsPerOneMillion() {
    return deathsPerOneMillion;
  }

  public void setDeathsPerOneMillion(BigDecimal deathsPerOneMillion) {
    this.deathsPerOneMillion = deathsPerOneMillion;
  }

  public CovidAll tests(BigDecimal tests) {
    this.tests = tests;
    return this;
  }

   /**
   * Get tests
   * @return tests
  **/
  @Schema(description = "")
  public BigDecimal getTests() {
    return tests;
  }

  public void setTests(BigDecimal tests) {
    this.tests = tests;
  }

  public CovidAll testsPerOneMillion(BigDecimal testsPerOneMillion) {
    this.testsPerOneMillion = testsPerOneMillion;
    return this;
  }

   /**
   * Get testsPerOneMillion
   * @return testsPerOneMillion
  **/
  @Schema(description = "")
  public BigDecimal getTestsPerOneMillion() {
    return testsPerOneMillion;
  }

  public void setTestsPerOneMillion(BigDecimal testsPerOneMillion) {
    this.testsPerOneMillion = testsPerOneMillion;
  }

  public CovidAll population(BigDecimal population) {
    this.population = population;
    return this;
  }

   /**
   * Get population
   * @return population
  **/
  @Schema(description = "")
  public BigDecimal getPopulation() {
    return population;
  }

  public void setPopulation(BigDecimal population) {
    this.population = population;
  }

  public CovidAll oneCasePerPeople(BigDecimal oneCasePerPeople) {
    this.oneCasePerPeople = oneCasePerPeople;
    return this;
  }

   /**
   * Get oneCasePerPeople
   * @return oneCasePerPeople
  **/
  @Schema(description = "")
  public BigDecimal getOneCasePerPeople() {
    return oneCasePerPeople;
  }

  public void setOneCasePerPeople(BigDecimal oneCasePerPeople) {
    this.oneCasePerPeople = oneCasePerPeople;
  }

  public CovidAll oneDeathPerPeople(BigDecimal oneDeathPerPeople) {
    this.oneDeathPerPeople = oneDeathPerPeople;
    return this;
  }

   /**
   * Get oneDeathPerPeople
   * @return oneDeathPerPeople
  **/
  @Schema(description = "")
  public BigDecimal getOneDeathPerPeople() {
    return oneDeathPerPeople;
  }

  public void setOneDeathPerPeople(BigDecimal oneDeathPerPeople) {
    this.oneDeathPerPeople = oneDeathPerPeople;
  }

  public CovidAll oneTestPerPeople(BigDecimal oneTestPerPeople) {
    this.oneTestPerPeople = oneTestPerPeople;
    return this;
  }

   /**
   * Get oneTestPerPeople
   * @return oneTestPerPeople
  **/
  @Schema(description = "")
  public BigDecimal getOneTestPerPeople() {
    return oneTestPerPeople;
  }

  public void setOneTestPerPeople(BigDecimal oneTestPerPeople) {
    this.oneTestPerPeople = oneTestPerPeople;
  }

  public CovidAll activePerOneMillion(BigDecimal activePerOneMillion) {
    this.activePerOneMillion = activePerOneMillion;
    return this;
  }

   /**
   * Get activePerOneMillion
   * @return activePerOneMillion
  **/
  @Schema(description = "")
  public BigDecimal getActivePerOneMillion() {
    return activePerOneMillion;
  }

  public void setActivePerOneMillion(BigDecimal activePerOneMillion) {
    this.activePerOneMillion = activePerOneMillion;
  }

  public CovidAll recoveredPerOneMillion(BigDecimal recoveredPerOneMillion) {
    this.recoveredPerOneMillion = recoveredPerOneMillion;
    return this;
  }

   /**
   * Get recoveredPerOneMillion
   * @return recoveredPerOneMillion
  **/
  @Schema(description = "")
  public BigDecimal getRecoveredPerOneMillion() {
    return recoveredPerOneMillion;
  }

  public void setRecoveredPerOneMillion(BigDecimal recoveredPerOneMillion) {
    this.recoveredPerOneMillion = recoveredPerOneMillion;
  }

  public CovidAll criticalPerOneMillion(BigDecimal criticalPerOneMillion) {
    this.criticalPerOneMillion = criticalPerOneMillion;
    return this;
  }

   /**
   * Get criticalPerOneMillion
   * @return criticalPerOneMillion
  **/
  @Schema(description = "")
  public BigDecimal getCriticalPerOneMillion() {
    return criticalPerOneMillion;
  }

  public void setCriticalPerOneMillion(BigDecimal criticalPerOneMillion) {
    this.criticalPerOneMillion = criticalPerOneMillion;
  }

  public CovidAll affectedCountries(BigDecimal affectedCountries) {
    this.affectedCountries = affectedCountries;
    return this;
  }

   /**
   * Get affectedCountries
   * @return affectedCountries
  **/
  @Schema(description = "")
  public BigDecimal getAffectedCountries() {
    return affectedCountries;
  }

  public void setAffectedCountries(BigDecimal affectedCountries) {
    this.affectedCountries = affectedCountries;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CovidAll covidAll = (CovidAll) o;
    return Objects.equals(this.updated, covidAll.updated) &&
        Objects.equals(this.cases, covidAll.cases) &&
        Objects.equals(this.todayCases, covidAll.todayCases) &&
        Objects.equals(this.deaths, covidAll.deaths) &&
        Objects.equals(this.recovered, covidAll.recovered) &&
        Objects.equals(this.todayRecovered, covidAll.todayRecovered) &&
        Objects.equals(this.active, covidAll.active) &&
        Objects.equals(this.critical, covidAll.critical) &&
        Objects.equals(this.casesPerOneMillion, covidAll.casesPerOneMillion) &&
        Objects.equals(this.deathsPerOneMillion, covidAll.deathsPerOneMillion) &&
        Objects.equals(this.tests, covidAll.tests) &&
        Objects.equals(this.testsPerOneMillion, covidAll.testsPerOneMillion) &&
        Objects.equals(this.population, covidAll.population) &&
        Objects.equals(this.oneCasePerPeople, covidAll.oneCasePerPeople) &&
        Objects.equals(this.oneDeathPerPeople, covidAll.oneDeathPerPeople) &&
        Objects.equals(this.oneTestPerPeople, covidAll.oneTestPerPeople) &&
        Objects.equals(this.activePerOneMillion, covidAll.activePerOneMillion) &&
        Objects.equals(this.recoveredPerOneMillion, covidAll.recoveredPerOneMillion) &&
        Objects.equals(this.criticalPerOneMillion, covidAll.criticalPerOneMillion) &&
        Objects.equals(this.affectedCountries, covidAll.affectedCountries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updated, cases, todayCases, deaths, recovered, todayRecovered, active, critical, casesPerOneMillion, deathsPerOneMillion, tests, testsPerOneMillion, population, oneCasePerPeople, oneDeathPerPeople, oneTestPerPeople, activePerOneMillion, recoveredPerOneMillion, criticalPerOneMillion, affectedCountries);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CovidAll {\n");
    
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    cases: ").append(toIndentedString(cases)).append("\n");
    sb.append("    todayCases: ").append(toIndentedString(todayCases)).append("\n");
    sb.append("    deaths: ").append(toIndentedString(deaths)).append("\n");
    sb.append("    recovered: ").append(toIndentedString(recovered)).append("\n");
    sb.append("    todayRecovered: ").append(toIndentedString(todayRecovered)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    critical: ").append(toIndentedString(critical)).append("\n");
    sb.append("    casesPerOneMillion: ").append(toIndentedString(casesPerOneMillion)).append("\n");
    sb.append("    deathsPerOneMillion: ").append(toIndentedString(deathsPerOneMillion)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("    testsPerOneMillion: ").append(toIndentedString(testsPerOneMillion)).append("\n");
    sb.append("    population: ").append(toIndentedString(population)).append("\n");
    sb.append("    oneCasePerPeople: ").append(toIndentedString(oneCasePerPeople)).append("\n");
    sb.append("    oneDeathPerPeople: ").append(toIndentedString(oneDeathPerPeople)).append("\n");
    sb.append("    oneTestPerPeople: ").append(toIndentedString(oneTestPerPeople)).append("\n");
    sb.append("    activePerOneMillion: ").append(toIndentedString(activePerOneMillion)).append("\n");
    sb.append("    recoveredPerOneMillion: ").append(toIndentedString(recoveredPerOneMillion)).append("\n");
    sb.append("    criticalPerOneMillion: ").append(toIndentedString(criticalPerOneMillion)).append("\n");
    sb.append("    affectedCountries: ").append(toIndentedString(affectedCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
